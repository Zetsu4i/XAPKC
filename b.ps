# Save as xapk-patcher.ps1
param(
    [Parameter(Mandatory=$true)]
    [string]$InputApks
)

$OutputDir = "output"
$TempDir = Join-Path $env:TEMP "xapk-$(Get-Random)"

function Cleanup {
    if (Test-Path $TempDir) {
        Remove-Item -Recurse -Force $TempDir
        Write-Host "[INFO] Cleaned up temporary directory" -ForegroundColor Blue
    }
}

try {
    # Create directories
    New-Item -ItemType Directory -Path $OutputDir -Force | Out-Null
    New-Item -ItemType Directory -Path $TempDir -Force | Out-Null

    # Check dependencies
    $required = @('unzip', 'zip', 'apk-mitm', 'apksigner', 'keytool', 'adb')
    foreach ($cmd in $required) {
        if (-not (Get-Command $cmd -ErrorAction SilentlyContinue)) {
            throw "Missing required command: $cmd"
        }
    }

    # Unzip APKS
    Expand-Archive -Path $InputApks -DestinationPath $TempDir

    # Create debug keystore
    if (Test-Path "debug.keystore") {
        Write-Host "[!] Existing debug.keystore found, overwriting..." -ForegroundColor Yellow
    }

    keytool -genkey -v -keystore debug.keystore -storepass android -alias androidkeykey `
        -keypass android -keyalg RSA -keysize 2048 -validity 10000 `
        -dname "cn=Unknown, ou=Unknown, o=Unknown, c=Unknown"

    # Process APKs
    Set-Location $TempDir
    apk-mitm base.apk
    Remove-Item base.apk
    Rename-Item base-patched.apk base.apk

    # Sign APKs
    Get-ChildItem *.apk | ForEach-Object {
        apksigner sign --ks ../debug.keystore --ks-pass pass:android $_.FullName
    }

    # Package XAPK
    $OutputFile = Join-Path $OutputDir "$([System.IO.Path]::GetFileNameWithoutExtension($InputApks))-patched.xapk"
    Compress-Archive -Path "$TempDir\*" -DestinationPath $OutputFile -Force

    Write-Host "[SUCCESS] Patched XAPK created: $OutputFile" -ForegroundColor Green

    # ADB install prompt
    $install = Read-Host "`n[?] Would you like to install the patched XAPK on a connected device? (y/n)"
    if ($install -match '[yY]') {
        adb devices | Out-Host
        adb install-multiple $OutputFile
    }
}
catch {
    Write-Host "[ERROR] $_" -ForegroundColor Red
    Cleanup
    exit 1
}
finally {
    Cleanup
}
